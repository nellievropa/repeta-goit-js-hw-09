{"mappings":"YAI0B,IAApBA,EAAO,CACTC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAIhCG,EAAQ,CAEQC,WAAN,KAE0BC,UAA5B,EACdC,MAAA,WAG4D,IAApDC,KAAKF,SAA+C,CAIX,IAAvCG,EAAYC,KAAKC,MAGSH,KAA3BF,UAAW,EAGoEE,KAA/EH,WAAaO,aAAY,WAEiC,IA+CxCC,EAAEC,EAAOC,EAAMC,EA3C5BC,EA4Dd,SAA2BA,GACvB,IAAMH,EAAQI,EAAIC,KAAKC,MAAMH,EAAS,MAAwB,OACxDF,EAAOG,EAAKC,KAAKC,MAAMH,EAAS,KAAoB,MAChDD,EAAOE,EAAIC,KAAKC,MAAMH,EAAS,IAAc,MAE/C,MAAO,CAAEH,QAAOC,OAAMC,O,CAjEbK,CAJOX,KAAKC,MAEOF,GA6CXK,GAAFD,EAvCNI,GAuCQH,MAAOC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,KACtClB,EAAKK,UAAUmB,YAAc,GAAYC,OAATT,EAAM,KAAWS,OAARR,EAAK,KAAQQ,OAALP,E,GA1B9C,IAjCC,C,EAoCqGQ,KAA7G,WACIC,cAAcjB,KAAKH,YAEuBG,KAArCF,UAAW,C,GAyBQ,SAAnBY,EAAIQ,GAEqD,OAAvDC,OAAOD,GAAOE,SAAS,EAAG,I,CArBrC9B,EAAKC,SAAS8B,iBAAiB,SAAS,WACpCzB,EAAMG,O,IAGVT,EAAKI,QAAQ2B,iBAAiB,SAAS,WACnCzB,EAAMoB,M","sources":["src/js/06-timer.js"],"sourcesContent":["import '../css/common.css';\n// import '../css/01-color-switcher.css';\n\n// пишемо интерфейс секундоміра\nconst refs = {\n    startBtn: document.querySelector('button[data-action-start]'),\n    stopBtn: document.querySelector('button[data-action-stop]'),\n    clockface: document.querySelector('.js-clockface')\n};\n\n\nconst timer = {\n    // щоб знайти ID інтервалу \n    intervalId: null,\n    // щоб відстежувати кнопку старт, що вона активн\n    isActive: false,\nstart() {\n    // щоб зробити кнопку неактивною під час виконання коду\n    // перевіряємо її і якщо- да то перериваємо виконання коду подальшого\n    if (this.isActive) {\n        return;\n    }\n    // в локальну зміну помістимо час, який є на момент старту\n    const startTime = Date.now();\n\n    // а в цій чаті коду пишемо,що вона активна\n    this.isActive = true;\n\n    // і запускаємо інтервал, який буде викликати цю функцію кожну секунду(або інший заданий проміжок часу)\n    this.intervalId = setInterval(() => {\n        // створимо стартовий час на момент запуску - він буде різний кожного разу!\n        const currentTime = Date.now();\n        // створимо змінну з різницею цих часів\n        const deltaTime = currentTime - startTime;\n        // cтворимо змінну, яка буде переводити мілісекунди в потрібний формат за допомогою функції\n        const time = getTimeComponents(deltaTime); \n    // деструктуризацію змінюємо на змінну time\n    // const times = getTimeComponents(deltaTime);\n\n     updateClockface(time);\n\n        // console.log('start-> currentTime', currentTime)\n        // час старту startTime буде незмінний!\n        // console.log('start => startTime', startTime);\n\n        // знайдемо різницю між часом старту та поточним часом\n        // console.log( currentTime - startTime);\n        // отримали наш рахівник секунд\n        // console.log(`${hours}:${mins}:${secs}`);\n\n        // при використанні цього формату максимальна кількість годин- 24, а якщо на распродажу відведено більше годи-- то це вже проблема при використанні таких форматів часу\n// console.log(`${pad(new Date(deltaTime).getUTCHours())}:${pad(new Date(deltaTime).getMinutes())}:${pad(new Date(deltaTime).getSeconds())}`);\n\n    }, 1000);\n},\n// щоб зупинити секундомер використовуємо метод clearInterval для якого потрібен ідентифікатор ID інтервала, який визваний в другому методі старт!\nstop () {\n    clearInterval(this.intervalId);\n    // тут знову кажемо, що кнопка неактивна повинна бути\n    this.isActive = false;\n}\n}\n\n// timer.start();\n\nrefs.startBtn.addEventListener('click', () => {\n    timer.start();\n})\n\nrefs.stopBtn.addEventListener('click', () => {\n    timer.stop();\n})\n\n// малюємо ІНТЕРФЕЙС!! \n// приймає мілісекунди\n// вираховує скільки в них годин, минут і секунд\n// малює інтерфейс\n\nfunction updateClockface ( { hours, mins, secs } ) {\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n//  для того, щоб зробити числа завжди двозначними (01 або 25) використовуємо метод pad\n// ми в нього обернемо наші значення hours, mins, secs\nfunction pad(value) {\n    // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n    return String(value).padStart(2, '0');\n}\n\n// Для того щоб перевести мілісекунди в поточний час є функція, якф\n// приймає час в мілісекундах\n//  вираховує скільки в цих мілісекундах вміщується годин, хвилин, секунд\n// повертає об'єкт з властивостями hours, mins, secs\n// зразки можно шукати в інеті!\n\nfunction getTimeComponents(time) {\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)));\n    const mins = pad( Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { hours, mins, secs };\n}\n\n"],"names":["$565ec17452d3e51b$var$refs","startBtn","document","querySelector","stopBtn","clockface","$565ec17452d3e51b$var$timer","intervalId","isActive","start","this","startTime","Date","now","setInterval","param","hours","mins","secs","time","$565ec17452d3e51b$var$pad","Math","floor","$565ec17452d3e51b$var$getTimeComponents","textContent","concat","stop","clearInterval","value","String","padStart","addEventListener"],"version":3,"file":"06-timer.4b402a7d.js.map"}