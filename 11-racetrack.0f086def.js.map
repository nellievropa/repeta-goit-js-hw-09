{"mappings":"AAEA,MAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAIuC,IAAvCC,EAAc,EAElB,MAAMC,EAAO,CACTC,SAAUC,SAASC,cAAc,gBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,6BAmEO,SAApCI,EAAmBC,GACxBR,EAAKI,YAAYK,YAAcD,C,CAGnC,SAASE,EAAoBF,GACzBR,EAAKK,cAAcI,YAAcD,C,CAYX,SAAjBG,EAAKC,GACd,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,GAkDcC,EAlDO,IAkDFC,EAlDQ,KAmD1BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADxD,IAAwBA,EAAKC,EAhDzBI,YAAW,KAE6BR,EAA5B,C,YAACf,E,MAAaa,E,KAAOI,GAAM,GACpCA,EAAK,G,CA5DShB,EAAhBC,SAASsB,iBAAiB,SAIW,WACtCxB,GAAc,EACd,MAAMyB,EAAW1B,EAAO2B,IAAId,GAE5BJ,EAAkB,IAClBG,EAAoB,yCAQCgB,EAPLF,EAQhBX,QAAQc,KAAKD,GAAQE,MAAK,EAAChB,MAAEA,EAAKI,KAAEA,MAEqBT,EAAnC,cAACR,aAAkCa,oBAAyBI,aAwBtF,UAA4Ba,YAAAC,EAAWlB,MAAEA,EAAKI,KAAEA,IAE5B,MAAde,EAAI,WAAWD,aAAuBlB,aAAiBI,cAE9ChB,EAAVM,UAAU0B,mBAAmB,YAAaD,E,CA3BHE,CAAlB,C,YAAElC,E,MAAaa,E,KAAOI,GAAO,IAKU,SAA7CU,GAChBb,QAAQqB,IAAIR,GAAQE,MAAKO,IAEkCzB,EAAnC,wCAAqE,G,CAlB7F0B,CAAWZ,GAMiD,IAAvCE,C","sources":["src/js/11-racetrack.js"],"sourcesContent":["import '../css/common.css';\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Saebiscuit',\n];\n// створимо змінну, яка рахуватиме кількість забігів\n\nlet raceCounter = 0;\n\nconst refs = {\n    startBtn: document.querySelector('.js-race-btn'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-result-table > tbody'),\n}\n\n// запускаємо коней по кліку на кнопку старт\n// refs.startBtn.addEventListener('click', () => {\n    // const promises = horses.map(run);\n    // refs.winnerField.textContent = '';-замінюємо на створену функцію!\n    // updateWinnerField('');\n    // і напишемо , що заїзд почався\n    // refs.progressField.textContent = 'Заезд начался, ставки не принимаются!'-замінюємо на створену функцію!\n    // updateProgressField('Заезд начался, ставки не принимаются!')\n    \n// винесли визначення переможця в окрему функцію, а сюди передали тільки звернення до неї через проміс\n// determineWinner(promises);\n    // Promise.race(promises).then(({ horse, time }) => {\n    //     // refs.winnerField.textContent = `%c Победил ${ horse} финишировал за ${time} времени`; -замінюємо на створену функцію\n    //     updateWinnerField(`Победил ${ horse} финишировал за ${time} времени`);\n    //     updateResultTable({ horse, time });\n     \n    // });\n    // waitForAll(promises);\n    // Promise.all(promises).then(x => {\n    //     // refs.progressField.textContent = '%c Заезд окончен, принимаются ставки!'-замінюємо на створену функцію!\n    //     updateProgressField('%c Заезд окончен, принимаются ставки!')\n             \n  \n    // })\n// });\n\n\n// і тоді refs.startBtn.addEventListener буде виглядати так \nrefs.startBtn.addEventListener('click', onStart);\n\n// потім взагалі всі const i функції виносимо в одну функцію onStart\n\nfunction onStart() {\n    raceCounter +=1;\n    const promises = horses.map(run);\n\n    updateWinnerField('');\n    updateProgressField('Заезд начался, ставки не принимаются!')\n    determineWinner(promises);\n    waitForAll(promises);\n}\n\n\n\n// виносимо в функцію визначення переможця, аргумент можемо назвати як хочемо horseP\nfunction determineWinner(horseP) {\n    Promise.race(horseP).then(({ horse, time }) => {\n        // refs.winnerField.textContent = `%c Победил ${ horse} финишировал за ${time} времени`; -замінюємо на створену функцію\n        updateWinnerField(`В заїзді № ${raceCounter} переміг ${ horse} финишировал за ${time} времени`);\n        updateResultTable({ raceCounter, horse, time });\n     \n    });\n}\n// винесемо функцію, яка визначає загальний список і передамо їй той же аргумент horseP\nfunction waitForAll(horseP) {\n    Promise.all(horseP).then(x => {\n        // refs.progressField.textContent = '%c Заезд окончен, принимаются ставки!'-замінюємо на створену функцію!\n        updateProgressField('%c Заезд окончен, принимаются ставки!')\n             \n  \n    })\n}\n// коли багато повторюваних полів -виносимо їх в функції!\n\nfunction updateWinnerField (message) {\n    refs.winnerField.textContent = message;\n};\n\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n};\n\nfunction updateResultTable({raceCounter, horse, time }) {\n// робимо шаблонну строку\nconst tr =`<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n// додаємо в таблицю\nrefs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n\n// функція для забігу одного коня\nfunction run (horse) {\nreturn new Promise((resolve, reject) => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n        // повертаємо об'єкт зі значеннями наприклад {\"horse\": \"Mango\",\"time\": 2329 }\n        resolve({raceCounter, horse, time})\n    }, time);\n\n});\n\n};\n// console.log(\n//     '%c Заезд начался, ставки не принимаются',\n//     'color: brown; font-size: 14px;'\n// );\n\n// run('Mango').then(x => console.log(x))\n// .catch(e => console.log(e));\n\n// якщо треба відстежити КОЛЕКЦІЮ (всіх коней) промісів - ми створюємо МАСИВ промісів\n\n// const promises = horses.map(horse => run(horse))\n// цей запис можна скоротити до цього\n// const promises = horses.map(run)\n// console.log(promises)\n\n// статиний метод Promise.race() приймає масив промісів, чекаэ виконання самого швидкого промису і повертає його через then(x => console.log(x))\n// тобто так ми можемо отримати саму швидку\n// Promise.race(promises).then(({ horse, time }) => {\n//     console.log(\n//         `%c Победил ${ horse} финишировал за ${time} времени`,\n//         'color: green; font-size: 14px;'\n//     );\n// })\n\n// статиний метод Promise.all() приймає масив промісів, чекаэ виконання всіх промісів і повертає їх масив через then(x => console.log(x))\n\n// Promise.all(promises).then(x => {\n//     console.log(x)\n    \n// console.log(\n//     '%c Заезд окончен, принимаются ставки!',\n//     'color: blue; font-size: 14px;'\n// );\n// })\n\n\n\n\n// сколько будет бегать лошадь \n\nfunction getRandomTime (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}"],"names":["$70d167d176d6540e$var$horses","$70d167d176d6540e$var$raceCounter","$70d167d176d6540e$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$70d167d176d6540e$var$updateWinnerField","message","textContent","$70d167d176d6540e$var$updateProgressField","$70d167d176d6540e$var$run","horse","Promise","resolve","reject","time","min","max","Math","floor","random","setTimeout","addEventListener","promises","map","horseP","race","then","raceCounter","raceCounter1","tr","insertAdjacentHTML","$70d167d176d6540e$var$updateResultTable","all","x","$70d167d176d6540e$var$waitForAll"],"version":3,"file":"11-racetrack.0f086def.js.map"}