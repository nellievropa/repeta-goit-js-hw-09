{"mappings":"AAoDyB,IAAKA,EAAWC,EAAXD,EAkB9B,SAAwBE,GACpBC,QAAQC,IAAI,oCACZD,QAAQC,IAAIF,E,EApByBD,EAuBzC,SAAsBI,GAClBF,QAAQC,IAAI,gCACZD,QAAQC,IAAI,qBACZD,QAAQC,IAAIC,E,EAzBZC,MAAM,qCAeO,KAdhBC,MAAKC,GAAKA,EAAEC,SACZF,MAAKL,IACFF,EAAUE,EAAQ,IAErBQ,OAAML,IACHF,QAAQC,IAAI,qBACHH,EAADI,EAAM","sources":["src/js/09-promisification.js"],"sourcesContent":["\n\n// const makeOrder = dish => {\n//     const DELAY = 1000;\n//     // пошук блюда займає якийсь час тому використовуємо іуеЕшьущге і DELAY\n\n\n// return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n    \n//     setTimeout(() =>{\n// if (passed) {\n//     resolve(`Ось наше блюдо: ${dish}`)\n// } else {\n//     reject('Вибачте, продукти скінчилися')\n// }\n//     }, DELAY);\n// })\n// };\n// // щоб проміс можна було використовувати в зовнішньому коді, пишемо return\n// return promise;\n// і заминяємо їм const щоб код став чистіше\n// зовсім коротко можна записати\n// return Promise.resolve(`Ось наше блюдо: ${dish}`) - і вона буде працювати\n\n// без промісів дістати данні з асинхронного коду не можливо!!!\n// можливо, але важко з колбек функціями\n// связанность кода- це коли одна функція знає про багато інших у зовнішньому коді- тобто вона зв'язана з ними дуже тісно- це пагано\n// const p = makeOrder('пиріжок');\n// console.log(p);\n// p також зайва змінна, тому прибираємо її нижче\n// makeOrder('пиріжок').then(x => console.log('x'))\n// і тепер до р ми можемо додати .then i .catch\n// після того, як ми прибрали зайву const р, звертаємось одразу до функції\n// makeOrder('пиріжок').then(onMakeOrderSuccess).catch(onMakeOrderError).finally(console.log('I got it!'))\n\n// function onMakeOrderSuccess(result) {\n//     console.log('onMakeOrderSuccess');\n//     console.log(result);\n\n// }\n\n// function onMakeOrderError(error) {\n// console.log('onMakeOrderError');\n// console.log(error);\n// }\n\n// ЖИВИЙ ПРИКЛАД\n// запрос на сервіс- це асинхронна операція- вона поверне чи код чи помилку\n// тому використовуємо fetch()\n// https://pokeapi.co\n\nconst fetchPokemonById = (id, onSuccess, onError) => {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n.then(r => r.json())\n.then(pokemon => {\n    onSuccess(pokemon);\n})\n.catch(error => {\n    console.log('єто в блоке catch');\n    onError(error);\n});\n\n};\n\n// fetchPokemonById(1);\n// fetchPokemonById(3);\n// fetchPokemonById(2);\nfetchPokemonById(1, onFetchSuccess, onFetchError)\n\nfunction onFetchSuccess(pokemon) {\n    console.log('onFetchSuccess -> onFetchSuccess');\n    console.log(pokemon);\n}\n\nfunction onFetchError(error) {\n    console.log('onFetchError -> onFetchError');\n    console.log('єто в блоке catch');\n    console.log(error);\n}\n\n"],"names":["onSuccess","onError","pokemon","console","log","error","fetch","then","r","json","catch"],"version":3,"file":"09-promisification.27a4237e.js.map"}