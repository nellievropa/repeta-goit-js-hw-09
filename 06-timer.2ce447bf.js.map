{"mappings":"sEACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,WCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,E,EAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,C,ECJe,IAApBgB,EAAO,CACTC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,iBAClCG,eAAgBJ,SAASC,cAAc,oCACvCI,cAAeL,SAASC,cAAc,mCACtCK,gBAAiBN,SAASC,cAAc,yBA2DtCM,EAAQ,IAAX,W,sBAtDGC,EACUC,G,IAAAC,EAAAD,EAAEC,O,aACVC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKD,OAASA,EAEdC,KAAKG,M,iBAIbrB,IAAA,O,MAAA,WACI,IAAMsB,EAAOJ,KAAKK,kBAAkB,GACpCL,KAAKD,OAAOK,E,IAGhBtB,IAAA,Q,MAAA,W,WACI,IAAIkB,KAAKE,SAAT,CAGA,IAAMI,EAAYC,KAAKC,MAC3BR,KAAKE,UAAW,EAEhBF,KAAKC,WAAaQ,aAAY,WAC1B,IACMC,EADcH,KAAKC,MACOF,EAC1BF,EAAOO,EAAKN,kBAAkBK,GAEvCC,EAAKZ,OAAOK,E,GACV,IAXK,C,IAaRtB,IAAA,O,MAAA,WACI8B,cAAcZ,KAAKC,YAEnBD,KAAKE,UAAW,EAEhB,IAAME,EAAOJ,KAAKK,kBAAkB,GACpCL,KAAKD,OAAOK,E,IAEftB,IAAA,oB,MAAA,SAAkBsB,GAOP,MAAO,CAAES,MANHb,KAAKc,IACfC,KAAKC,MAAMZ,EAAS,MAAwB,OAKxBa,KAHXjB,KAAKc,IAAIC,KAAKC,MAAMZ,EAAS,KAAoB,MAGhCc,KAFblB,KAAKc,IAAIC,KAAKC,MAAMZ,EAAS,IAAc,M,IAKhEtB,IAAA,M,MAAA,SAAId,GAEA,OAAOmD,OAAOnD,GAAOoD,SAAS,EAAG,I,OAIlC,GAAW,CAAU,CACpBrB,OA2EU,SAAWD,G,IAAEe,EAAFf,EAAEe,MAAOI,EAATnB,EAASmB,KAAMC,EAAfpB,EAAeoB,KACpC/B,EAAKK,UAAU6B,YAAc,GAAYC,OAATT,EAAM,KAAWS,OAARL,EAAK,KAAQK,OAALJ,E,IAbI/B,EAApDC,SAASmC,iBAAiB,QAAS3B,EAAM4B,MAAMC,KAAK7B,IACzDT,EAAKI,QAAQgC,iBAAiB,QAAS3B,EAAM8B,KAAKD,KAAK7B,IA6C5C,IAAL+B,EAAc,IAAIpB,KAGlBqB,EAAa,IAAIrB,KAAK,cAE5BsB,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAaD,GAKRlB,aAAL,WACR,IAKesB,EAETC,EACAC,EACAC,EACAC,EAGAC,EAEAvB,EAEAwB,EAEAC,EAnBAC,EAAc,IAAIhC,KAClBiC,EAAa,IAAIjC,KAAK,cAC5BsB,QAAQC,KAGOC,EAHOS,EAAaD,EAQ7BJ,EAAa,IADbD,EAAgB,IADhBD,EAAkB,IADlBD,EAAS,OAMTI,EAAOrB,KAAKC,MAAMe,EAAKI,GAEvBtB,EAAQE,KAAKC,MAAMe,EAAMI,EAAOD,GAEhCG,EAAUtB,KAAKC,MAAMe,EAAOI,EAAOD,EAAQD,GAE3CK,EAAUvB,KAAKC,MAAMe,EAAQI,EAAOD,EAAQD,EAAUD,GAErD,CAAEI,OAAMvB,QAAOwB,UAASC,Y,GAlBhC,KAyBH,IAmFMG,EAAW,IAAd,W,sBAnFGC,EACU5C,G,IAAAC,EAAAD,EAAEC,O,aACVC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKD,OAASA,EAEdC,KAAKG,M,iBAGTrB,IAAA,O,MAAA,WACI,IAAMsB,EAAOJ,KAAK2C,UAAU,GAC5B3C,KAAKD,OAAOK,E,IAGpBtB,IAAA,S,MAAA,W,WACI,IAAIkB,KAAKE,SAAT,CAGA,IAAM0C,EAAa,IAAIrC,KAAK,cAChCP,KAAKE,UAAW,EAEhBF,KAAKC,WAAaQ,aAAY,WAC1B,IAAMoC,EAActC,KAAKC,MACzBqB,QAAQC,IAAIe,GACZ,IAAMnC,EAAYkC,EAAaC,EACzBzC,EAAOO,EAAKgC,UAAUjC,GAE/BC,EAAKZ,OAAOK,E,GACV,IAZK,C,IAeRtB,IAAA,Q,MAAA,WACI8B,cAAcZ,KAAKC,YAEuBD,KAArCE,UAAW,EAGoC,IAA9CE,EAAOJ,KAAK2C,UAAU,GAC5B3C,KAAKD,OAAOK,E,IAkBftB,IAAA,Y,MAAA,SAAUiD,GAEP,IACME,EAASD,IACTE,EAAOD,KACPE,EAAa,GAAPD,EAWZ,MAAO,CAAEE,KARIpC,KAAKc,IAAIC,KAAKC,MAAMe,EAAKI,IAQvBtB,MANDb,KAAKc,IAAIC,KAAKC,MAAMe,EAAMI,EAAOD,IAMzBG,QAJNrC,KAAKc,IAAIC,KAAKC,MAAMe,EAAOI,EAAOD,EAAQD,IAI3BK,QAFftC,KAAKc,IAAIC,KAAKC,MAAMe,EAAQI,EAAOD,EAAQD,EAZ5C,M,IAiBjBnD,IAAA,M,MAAA,SAAId,GAEF,OAAOmD,OAAOnD,GAAOoD,SAAS,EAAG,I,OAMlC,GAAc,CAAgB,CAC7BrB,OAGJ,SAA+BD,G,IAAEsC,EAAFtC,EAAEsC,KAAMvB,EAARf,EAAQe,MAAOwB,EAAfvC,EAAeuC,QAASC,EAAxBxC,EAAwBwC,QACnDnD,EAAKQ,gBAAgB0B,YAAc,GAAWC,OAARc,EAAK,KAAYd,OAATT,EAAM,KAAcS,OAAXe,EAAQ,KAAWf,OAARgB,E,IAGtEnD,EAAKM,eAAe8B,iBAAiB,QAASkB,EAASK,OAAOrB,KAAKgB,IACnEtD,EAAKO,cAAc6B,iBAAiB,QAASkB,EAASM,MAAMtB,KAAKgB,G","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/06-timer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","import '../css/common.css';\n// import '../css/01-color-switcher.css';\n\n// пишемо интерфейс секундоміра\nconst refs = {\n    startBtn: document.querySelector('button[data-action-start]'),\n    stopBtn: document.querySelector('button[data-action-stop]'),\n    clockface: document.querySelector('.js-clockface'),\n    reversStartBtn: document.querySelector('button[data-action-revers-start]'),\n    reversStopBtn: document.querySelector('button[data-action-revers-stop]'),\n    reversClockface: document.querySelector('.js-revers-clockface'),\n};\n\n\n// Таймер для ДЗ\nclass Timer {\n    constructor({ onTick }) {\n        this.intervalId = null;\n        this.isActive = false;\n        this.onTick = onTick;\n\n        this.init();\n    }\n\n// метод  init() створить нам інтерфес з нулевими значеннями\ninit() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n}\n\nstart() {\n    if (this.isActive) {\n        return;\n    }\n    const startTime = Date.now();\nthis.isActive = true;\n\nthis.intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = currentTime - startTime;\n    const time = this.getTimeComponents(deltaTime);\n\n this.onTick(time);\n}, 1000);\n}\nstop () {\n    clearInterval(this.intervalId);\n    // тут знову кажемо, що кнопка неактивна повинна бути\n    this.isActive = false;\n    // щоб обнулити таймер: викликаємо функцію і передаємо їй 0 секунд\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n}\n getTimeComponents(time) {\n    const hours = this.pad(\n        Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)),\n        );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { hours, mins, secs };\n}\n\npad(value) {\n    // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n    return String(value).padStart(2, '0');\n}\n}\n\nconst timer = new Timer({\n    onTick: updateClockface,\n});\n\n\n\n// const timer = {\n//     // щоб знайти ID інтервалу \n//     intervalId: null,\n//     // щоб відстежувати кнопку старт, що вона активн\n//     isActive: false,\n// start() {\n//     // щоб зробити кнопку неактивною під час виконання коду\n//     // перевіряємо її і якщо- да то перериваємо виконання коду подальшого\n//     if (this.isActive) {\n//         return;\n//     }\n//     // в локальну зміну помістимо час, який є на момент старту\n//     const startTime = Date.now();\n\n//     // а в цій чаті коду пишемо,що вона активна\n//     this.isActive = true;\n\n//     // і запускаємо інтервал, який буде викликати цю функцію кожну секунду(або інший заданий проміжок часу)\n//     this.intervalId = setInterval(() => {\n//         // створимо стартовий час на момент запуску - він буде різний кожного разу!\n//         const currentTime = Date.now();\n//         // створимо змінну з різницею цих часів\n//         const deltaTime = currentTime - startTime;\n//         // cтворимо змінну, яка буде переводити мілісекунди в потрібний формат за допомогою функції\n//         const time = getTimeComponents(deltaTime); \n//     // деструктуризацію змінюємо на змінну time\n//     // const times = getTimeComponents(deltaTime);\n\n//      updateClockface(time);\n\n//         // console.log('start-> currentTime', currentTime)\n//         // час старту startTime буде незмінний!\n//         // console.log('start => startTime', startTime);\n\n//         // знайдемо різницю між часом старту та поточним часом\n//         // console.log( currentTime - startTime);\n//         // отримали наш рахівник секунд\n//         // console.log(`${hours}:${mins}:${secs}`);\n\n//         // при використанні цього формату максимальна кількість годин- 24, а якщо на распродажу відведено більше годи-- то це вже проблема при використанні таких форматів часу\n// // console.log(`${pad(new Date(deltaTime).getUTCHours())}:${pad(new Date(deltaTime).getMinutes())}:${pad(new Date(deltaTime).getSeconds())}`);\n\n//     }, 1000);\n// },\n// // щоб зупинити секундомер використовуємо метод clearInterval для якого потрібен ідентифікатор ID інтервала, який визваний в другому методі старт!\n// stop () {\n//     clearInterval(this.intervalId);\n//     // тут знову кажемо, що кнопка неактивна повинна бути\n//     this.isActive = false;\n// }\n// }\n\n// timer.start();\n\n// refs.startBtn.addEventListener('click', () => {\n//     timer.start();\n// });\n// якщо функцію переписуємо як МЕТОД то додаємо до чого вона прив'язана bind(timer)\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// refs.stopBtn.addEventListener('click', () => {\n//     timer.stop();\n// });\n\n// малюємо ІНТЕРФЕЙС!! \n// приймає мілісекунди\n// вираховує скільки в них годин, минут і секунд\n// малює інтерфейс\n\nfunction updateClockface({ hours, mins, secs }) {\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n//  для того, щоб зробити числа завжди двозначними (01 або 25) використовуємо метод pad\n// ми в нього обернемо наші значення hours, mins, secs\n// function pad(value) {\n//     // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n//     return String(value).padStart(2, '0');\n// }\n\n// Для того щоб перевести мілісекунди в поточний час є функція, якф\n// приймає час в мілісекундах\n//  вираховує скільки в цих мілісекундах вміщується годин, хвилин, секунд\n// повертає об'єкт з властивостями hours, mins, secs\n// зразки можно шукати в інеті!\n\n// function getTimeComponents(time) {\n//     const hours = pad(\n//         Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)),\n//         );\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//         const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//             return { hours, mins, secs };\n// }\n\n\n\n\n\n\n\n// поточна дата\nconst currentDate = new Date();\n// дата від якої будемо рахувати відлік\n\nconst targetDate = new Date('12/31/2023');\n\nconsole.log(currentDate)\nconsole.log(targetDate)\nconsole.log(targetDate - currentDate)\n\n// = 5817375901 мілісекунд потім по формулам вираховуємо скільки днів годин і хвилин \n// потрібно робит все в setInterval(() =>{}, 1000)\n\nsetInterval(() =>{\n    const currentDate = new Date();\n    const targetDate = new Date('12/31/2023');\n    console.log(convertMs(targetDate - currentDate))\n}, 1000)\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); \n\nclass reversTimer {\n    constructor({ onTick }) {\n        this.intervalId = null;\n        this.isActive = false;\n        this.onTick = onTick;\n\n        this.init();\n    }\n\n    init() {\n        const time = this.convertMs(0);\n        this.onTick(time);\n    }\n\nstart1() {\n    if (this.isActive) {\n        return;\n    }\n    const targetTime = new Date('10/26/2023');\nthis.isActive = true;\n\nthis.intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    console.log(currentTime)\n    const deltaTime = targetTime - currentTime;\n    const time = this.convertMs(deltaTime);\n\n this.onTick(time);\n}, 1000);\n}\n\nstop1 () {\n    clearInterval(this.intervalId);\n    // тут знову кажемо, що кнопка неактивна повинна бути\n    this.isActive = false;\n    // щоб обнулити таймер: викликаємо функцію і передаємо їй 0 секунд\n    \n    const time = this.convertMs(0);\n    this.onTick(time);\n}\n// getTimeComponents(time) {\n//     const hours = this.pad(\n//         Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)),\n//         );\n//     const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//         const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//             return { hours, mins, secs };\n// }\n\n// pad(value) {\n//     // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n//     return String(value).padStart(2, '0');\n// }\n\n\n convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = this.pad(Math.floor(ms / day));\n    // Remaining hours\n    const hours = this.pad(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n    // Remaining seconds\n    const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n  \n    return { days, hours, minutes, seconds };\n  }\n\n  pad(value) {\n    // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n    return String(value).padStart(2, '0');\n}\n\n\n}\n\nconst revTimer = new reversTimer({\n    onTick: updateReversClockface,\n});\n\nfunction updateReversClockface({ days, hours, minutes, seconds }) {\n    refs.reversClockface.textContent = `${days}:${hours}:${minutes}:${seconds}`;\n}\n\nrefs.reversStartBtn.addEventListener('click', revTimer.start1.bind(revTimer));\nrefs.reversStopBtn.addEventListener('click', revTimer.stop1.bind(revTimer));"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$565ec17452d3e51b$var$refs","startBtn","document","querySelector","stopBtn","clockface","reversStartBtn","reversStopBtn","reversClockface","$565ec17452d3e51b$var$timer","Timer","param","onTick","this","intervalId","isActive","init","time","getTimeComponents","startTime","Date","now","setInterval","deltaTime","_this","clearInterval","hours","pad","Math","floor","mins","secs","String","padStart","textContent","concat","addEventListener","start","bind","stop","$565ec17452d3e51b$var$currentDate","$565ec17452d3e51b$var$targetDate","console","log","ms","second","minute","hour","day","days","minutes","seconds","currentDate1","targetDate1","$565ec17452d3e51b$var$revTimer","reversTimer","convertMs","targetTime","currentTime","start1","stop1"],"version":3,"file":"06-timer.2ce447bf.js.map"}