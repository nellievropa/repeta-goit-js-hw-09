{"mappings":"YAEA,IAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAGEC,EAAO,CACTC,SAAUC,SAASC,cAAc,gBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,6BA8BO,SAApCI,EAAmBC,GACxBR,EAAKI,YAAYK,YAAcD,C,CAGnC,SAASE,EAAoBF,GACzBR,EAAKK,cAAcI,YAAcD,C,CAYX,SAAjBG,EAAKC,GACd,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAkDoBC,EAAKC,EAlDnBC,GAkDcF,EAlDO,IAkDFC,EAlDQ,KAmD1BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAjDpDM,YAAW,WAE6BR,EAA5B,CAACF,QAAOM,Q,GACjBA,E,IAlD4BlB,EAA9BC,SAASsB,iBAAiB,SAAS,WACpC,IAAMC,EAAWzB,EAAO0B,IAAId,GAEFJ,EAAR,IAGuCG,EAArC,yCAGWG,QAAvBa,KAAKF,GAAUG,MAAK,SAAAC,G,IAAGhB,EAAKgB,EAALhB,MAAOM,EAAIU,EAAJV,KAEmBX,EAAnC,WAA2CsB,OAAxBjB,EAAM,oBAAoCiB,OAALX,EAAK,aAuBvF,SAA2BU,G,IAAEhB,EAAFgB,EAAEhB,MAAOM,EAATU,EAASV,KAE9BY,EAAI,qBAAsCD,OAAjBjB,EAAM,aAAgBiB,OAALX,EAAK,cAEtClB,EAAVM,UAAUyB,mBAAmB,YAAaD,E,CA1BZE,CAAT,CAAEpB,QAAOM,Q,IAI/BL,QAAQoB,IAAIT,GAAUG,MAAK,SAAAO,GAEgCxB,EAAnC,wC","sources":["src/js/11-racetrack.js"],"sourcesContent":["import '../css/common.css';\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Saebiscuit',\n];\n\nconst refs = {\n    startBtn: document.querySelector('.js-race-btn'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-result-table > tbody'),\n}\n\n// запускаємо коней по кліку на кнопку старт\nrefs.startBtn.addEventListener('click', () => {\n    const promises = horses.map(run);\n    // refs.winnerField.textContent = '';-замінюємо на створену функцію!\n    updateWinnerField('');\n    // і напишемо , що заїзд почався\n    // refs.progressField.textContent = 'Заезд начался, ставки не принимаются!'-замінюємо на створену функцію!\n    updateProgressField('Заезд начался, ставки не принимаются!')\n    \n\n    Promise.race(promises).then(({ horse, time }) => {\n        // refs.winnerField.textContent = `%c Победил ${ horse} финишировал за ${time} времени`; -замінюємо на створену функцію\n        updateWinnerField(`Победил ${ horse} финишировал за ${time} времени`);\n        updateResultTable({ horse, time });\n     \n    });\n\n    Promise.all(promises).then(x => {\n        // refs.progressField.textContent = '%c Заезд окончен, принимаются ставки!'-замінюємо на створену функцію!\n        updateProgressField('%c Заезд окончен, принимаются ставки!')\n             \n  \n    })\n})\n\n// коли багато повторюваних полів -виносимо їх в функції!\n\nfunction updateWinnerField (message) {\n    refs.winnerField.textContent = message;\n};\n\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n};\n\nfunction updateResultTable({ horse, time }) {\n// робимо шаблонну строку\nconst tr =`<tr><td>0</td><td>${horse}</td><td>${time}</td></tr>`;\n// додаємо в таблицю\nrefs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n\n// функція для забігу одного коня\nfunction run (horse) {\nreturn new Promise((resolve, reject) => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n        // повертаємо об'єкт зі значеннями наприклад {\"horse\": \"Mango\",\"time\": 2329 }\n        resolve({horse, time})\n    }, time);\n\n});\n\n};\n// console.log(\n//     '%c Заезд начался, ставки не принимаются',\n//     'color: brown; font-size: 14px;'\n// );\n\n// run('Mango').then(x => console.log(x))\n// .catch(e => console.log(e));\n\n// якщо треба відстежити КОЛЕКЦІЮ (всіх коней) промісів - ми створюємо МАСИВ промісів\n\n// const promises = horses.map(horse => run(horse))\n// цей запис можна скоротити до цього\n// const promises = horses.map(run)\n// console.log(promises)\n\n// статиний метод Promise.race() приймає масив промісів, чекаэ виконання самого швидкого промису і повертає його через then(x => console.log(x))\n// тобто так ми можемо отримати саму швидку\n// Promise.race(promises).then(({ horse, time }) => {\n//     console.log(\n//         `%c Победил ${ horse} финишировал за ${time} времени`,\n//         'color: green; font-size: 14px;'\n//     );\n// })\n\n// статиний метод Promise.all() приймає масив промісів, чекаэ виконання всіх промісів і повертає їх масив через then(x => console.log(x))\n\n// Promise.all(promises).then(x => {\n//     console.log(x)\n    \n// console.log(\n//     '%c Заезд окончен, принимаются ставки!',\n//     'color: blue; font-size: 14px;'\n// );\n// })\n\n\n\n\n// сколько будет бегать лошадь \n\nfunction getRandomTime (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}"],"names":["$94b25715ed6fadc5$var$horses","$94b25715ed6fadc5$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$94b25715ed6fadc5$var$updateWinnerField","message","textContent","$94b25715ed6fadc5$var$updateProgressField","$94b25715ed6fadc5$var$run","horse","Promise","resolve","reject","min","max","time","Math","floor","random","setTimeout","addEventListener","promises","map","race","then","param","concat","tr","insertAdjacentHTML","$94b25715ed6fadc5$var$updateResultTable","all","x"],"version":3,"file":"11-racetrack.539d202d.js.map"}