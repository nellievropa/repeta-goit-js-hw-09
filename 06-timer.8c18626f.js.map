{"mappings":"AAI0B,MAApBA,EAAO,CACTC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBA2DtC,MAAMG,EAAQ,IAtDH,MACPC,aAAYC,OAAEA,IACVC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKD,OAASA,EAEdC,KAAKG,M,CAI8BA,OACvC,MAAMC,EAAOJ,KAAKK,kBAAkB,GACpCL,KAAKD,OAAOK,E,CAGhBE,QACI,GAAIN,KAAKE,SACL,OAEJ,MAAMK,EAAYC,KAAKC,MAC3BT,KAAKE,UAAW,EAEhBF,KAAKC,WAAaS,aAAY,KAC1B,MACMC,EADcH,KAAKC,MACOF,EAC1BH,EAAOJ,KAAKK,kBAAkBM,GAEvCX,KAAKD,OAAOK,EAAK,GACf,I,CAEHQ,OACIC,cAAcb,KAAKC,YAEuBD,KAArCE,UAAW,EAEoC,MAA9CE,EAAOJ,KAAKK,kBAAkB,GACpCL,KAAKD,OAAOK,E,CAEfC,kBAAkBD,GAOP,MAAO,C,MANDJ,KAAKc,IACfC,KAAKC,MAAMZ,EAAS,MAAwB,O,KAEnCJ,KAAKc,IAAIC,KAAKC,MAAMZ,EAAS,KAAoB,M,KAC7CJ,KAAKc,IAAIC,KAAKC,MAAMZ,EAAS,IAAc,M,CAKhEU,IAAIG,GAE8D,OAAvDC,OAAOD,GAAOE,SAAS,EAAG,I,GAIb,CACpBpB,OA2EU,UAAWqB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACpC/B,EAAKK,UAAU2B,YAAc,GAAGH,KAASC,KAAQC,G,IAbI/B,EAApDC,SAASgC,iBAAiB,QAAS3B,EAAMS,MAAMmB,KAAK5B,IACzDN,EAAKI,QAAQ6B,iBAAiB,QAAS3B,EAAMe,KAAKa,KAAK5B","sources":["src/js/06-timer.js"],"sourcesContent":["import '../css/common.css';\n// import '../css/01-color-switcher.css';\n\n// пишемо интерфейс секундоміра\nconst refs = {\n    startBtn: document.querySelector('button[data-action-start]'),\n    stopBtn: document.querySelector('button[data-action-stop]'),\n    clockface: document.querySelector('.js-clockface'),\n};\n\n\n// Таймер для ДЗ\nclass Timer {\n    constructor({ onTick }) {\n        this.intervalId = null;\n        this.isActive = false;\n        this.onTick = onTick;\n\n        this.init();\n    }\n\n// метод  init() створить нам інтерфес з нулевими значеннями\ninit() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n}\n\nstart() {\n    if (this.isActive) {\n        return;\n    }\n    const startTime = Date.now();\nthis.isActive = true;\n\nthis.intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = currentTime - startTime;\n    const time = this.getTimeComponents(deltaTime);\n\n this.onTick(time);\n}, 1000);\n}\nstop () {\n    clearInterval(this.intervalId);\n    // тут знову кажемо, що кнопка неактивна повинна бути\n    this.isActive = false;\n    // щоб обнулити таймер: викликаємо функцію і передаємо їй 0 секунд\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n}\n getTimeComponents(time) {\n    const hours = this.pad(\n        Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)),\n        );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { hours, mins, secs };\n}\n\npad(value) {\n    // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n    return String(value).padStart(2, '0');\n}\n}\n\nconst timer = new Timer({\n    onTick: updateClockface,\n});\n\n\n\n// const timer = {\n//     // щоб знайти ID інтервалу \n//     intervalId: null,\n//     // щоб відстежувати кнопку старт, що вона активн\n//     isActive: false,\n// start() {\n//     // щоб зробити кнопку неактивною під час виконання коду\n//     // перевіряємо її і якщо- да то перериваємо виконання коду подальшого\n//     if (this.isActive) {\n//         return;\n//     }\n//     // в локальну зміну помістимо час, який є на момент старту\n//     const startTime = Date.now();\n\n//     // а в цій чаті коду пишемо,що вона активна\n//     this.isActive = true;\n\n//     // і запускаємо інтервал, який буде викликати цю функцію кожну секунду(або інший заданий проміжок часу)\n//     this.intervalId = setInterval(() => {\n//         // створимо стартовий час на момент запуску - він буде різний кожного разу!\n//         const currentTime = Date.now();\n//         // створимо змінну з різницею цих часів\n//         const deltaTime = currentTime - startTime;\n//         // cтворимо змінну, яка буде переводити мілісекунди в потрібний формат за допомогою функції\n//         const time = getTimeComponents(deltaTime); \n//     // деструктуризацію змінюємо на змінну time\n//     // const times = getTimeComponents(deltaTime);\n\n//      updateClockface(time);\n\n//         // console.log('start-> currentTime', currentTime)\n//         // час старту startTime буде незмінний!\n//         // console.log('start => startTime', startTime);\n\n//         // знайдемо різницю між часом старту та поточним часом\n//         // console.log( currentTime - startTime);\n//         // отримали наш рахівник секунд\n//         // console.log(`${hours}:${mins}:${secs}`);\n\n//         // при використанні цього формату максимальна кількість годин- 24, а якщо на распродажу відведено більше годи-- то це вже проблема при використанні таких форматів часу\n// // console.log(`${pad(new Date(deltaTime).getUTCHours())}:${pad(new Date(deltaTime).getMinutes())}:${pad(new Date(deltaTime).getSeconds())}`);\n\n//     }, 1000);\n// },\n// // щоб зупинити секундомер використовуємо метод clearInterval для якого потрібен ідентифікатор ID інтервала, який визваний в другому методі старт!\n// stop () {\n//     clearInterval(this.intervalId);\n//     // тут знову кажемо, що кнопка неактивна повинна бути\n//     this.isActive = false;\n// }\n// }\n\n// timer.start();\n\n// refs.startBtn.addEventListener('click', () => {\n//     timer.start();\n// });\n// якщо функцію переписуємо як МЕТОД то додаємо до чого вона прив'язана bind(timer)\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// refs.stopBtn.addEventListener('click', () => {\n//     timer.stop();\n// });\n\n// малюємо ІНТЕРФЕЙС!! \n// приймає мілісекунди\n// вираховує скільки в них годин, минут і секунд\n// малює інтерфейс\n\nfunction updateClockface({ hours, mins, secs }) {\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n//  для того, щоб зробити числа завжди двозначними (01 або 25) використовуємо метод pad\n// ми в нього обернемо наші значення hours, mins, secs\n// function pad(value) {\n//     // цей запис означає : візьми число, зроби з нього строку і на старті(ЗЛІВА!!) додай '0'\n//     return String(value).padStart(2, '0');\n// }\n\n// Для того щоб перевести мілісекунди в поточний час є функція, якф\n// приймає час в мілісекундах\n//  вираховує скільки в цих мілісекундах вміщується годин, хвилин, секунд\n// повертає об'єкт з властивостями hours, mins, secs\n// зразки можно шукати в інеті!\n\n// function getTimeComponents(time) {\n//     const hours = pad(\n//         Math.floor((time % (1000 * 60 * 60 *24)) / (1000 * 60 * 60)),\n//         );\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//         const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//             return { hours, mins, secs };\n// }\n\n"],"names":["$4bf6ce8950836956$var$refs","startBtn","document","querySelector","stopBtn","clockface","$4bf6ce8950836956$var$timer","constructor","onTick","this","intervalId","isActive","init","time","getTimeComponents","start","startTime","Date","now","setInterval","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","hours","mins","secs","textContent","addEventListener","bind"],"version":3,"file":"06-timer.8c18626f.js.map"}