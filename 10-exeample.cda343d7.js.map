{"mappings":"AAQA,MAAMA,EAAmBC,GACdC,MAAM,qCAAqCD,KACrDE,MAAKC,GAAKA,EAAEC,SAuBmC,SAAvCC,EAAeC,GACpBC,QAAQC,IAAI,oCACZD,QAAQC,IAAIF,E,CAGhB,SAASG,EAAaC,GAClBH,QAAQC,IAAI,gCACZD,QAAQC,IAAI,qBACHD,QAADC,IAAIE,E,CAfgCX,EAA/B,GAAGG,KAAKG,GAAgBM,MAAMF,GAEtBV,EAAR,GAAGG,KAAKG,GAAgBM,MAAMF,GAC/CV,EAAiB,KAAMG,KAAKG,GAAgBM,MAAMF,GAkBvC,IAAIG,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAASC,KAAKC,SAAW,GAE/BC,YAAW,KACJH,GACCF,EAAQ,mBAEFC,EAAC,8BAA4C,GACjD,GACP,KAMVZ,MAAKiB,GAAUZ,QAAQC,IAAIW,KAC3BR,OAAMD,GAASH,QAAQC,IAAIE","sources":["src/js/10-exemple.js"],"sourcesContent":["// ЖИВИЙ ПРИКЛАД\n// запрос на сервіс- це асинхронна операція- вона поверне чи код чи помилку\n// тому використовуємо fetch() -который возвращает нам готовый Промис\n// function fetch (url) {\n//     return new Promise (...)\n// }\n// https://pokeapi.co\n\nconst fetchPokemonById = id => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n.then(r => r.json())\n// .then(pokemon => {\n//     onSuccess(pokemon);\n// })\n// .catch(error => {\n//     console.log('єто в блоке catch');\n//     onError(error);\n// });\n\n};\n\n// fetchPokemonById(1);\n// fetchPokemonById(3);\n// fetchPokemonById(2);\n// fetchPokemonById(1, onFetchSuccess, onFetchError)\n// нужно чтобы было от так для вызова функции во внешнем коде\nfetchPokemonById(3).then(onFetchSuccess).catch(onFetchError) \n// поетому в const  добавляем return і убираем (onSuccess, onError)\nfetchPokemonById(7).then(onFetchSuccess).catch(onFetchError) \nfetchPokemonById(1000).then(onFetchSuccess).catch(onFetchError)\n// fetchPokemonById(90000).then(onFetchSuccess).catch(onFetchError)\n\n// разделяем обязанности по отдельным маленьким функцыям Single Responsibility Principe\nfunction onFetchSuccess(pokemon) {\n    console.log('onFetchSuccess -> onFetchSuccess');\n    console.log(pokemon);\n}\n\nfunction onFetchError(error) {\n    console.log('onFetchError -> onFetchError');\n    console.log('єто в блоке catch');\n    console.log(error);\n}\n\n\n// новій Промис -пример!\nconst makePromise = () => {\n    return new Promise((resolve, reject) => {\n        const passed = Math.random() > 0.5;\n\n        setTimeout(() => {\n            if(passed) {\n                resolve('Куку це RESOLVE');\n            }\n                reject('Все пропало!!! бо це reject')    \n                })  \n        }, 1000);\n\n};\n// НЕ ЗАБІВАЕМ про return \n\nmakePromise()\n.then(result => console.log(result))\n.catch(error => console.log(error));\n\n"],"names":["$5a57c80af7e2292d$var$fetchPokemonById","id","fetch","then","r","json","$5a57c80af7e2292d$var$onFetchSuccess","pokemon","console","log","$5a57c80af7e2292d$var$onFetchError","error","catch","Promise","resolve","reject","passed","Math","random","setTimeout","result"],"version":3,"file":"10-exeample.cda343d7.js.map"}